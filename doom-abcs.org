#+TITLE:     Doom Emacs ABCs
#+AUTHOR:    Jason Scott
#+EMAIL:     dev.jason.scott@gmail.com
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS:   num:nil
* SPC RET
** SPC RET
*** Function
 bookmark-jump
*** Documentation
	Jump to bookmark BOOKMARK (a point in some file).
You may have a problem using this function if the value of variable
‘bookmark-alist’ is nil.  If that happens, you need to load in some
bookmarks.  See help on function ‘bookmark-load’ for more about
this.

If the file pointed to by BOOKMARK no longer exists, you will be asked
if you wish to give the bookmark a new location, and ‘bookmark-jump’
will then jump to the new location, as well as recording it in place
of the old one in the permanent bookmark record.

BOOKMARK is usually a bookmark name (a string).  It can also be a
bookmark record, but this is usually only done by programmatic callers.

If DISPLAY-FUNC is non-nil, it is a function to invoke to display the
bookmark.  It defaults to ‘pop-to-buffer-same-window’.  A typical value for
DISPLAY-FUNC would be ‘switch-to-buffer-other-window’.
* SPC SPC
** SPC SPC
*** Function
 projectile-find-file
*** Documentation
	Jump to a project’s file using completion.
With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)
* SPC '
** SPC '
*** Function
 ivy-resume
*** Documentation
	Resume the last completion session.
* SPC ,
** SPC ,
*** Function
 persp-switch-to-buffer
*** Documentation
	Switch to buffer, read buffer with restriction to current perspective.
* SPC .
** SPC .
*** Function
 find-file
*** Documentation
	Edit file FILENAME.
Switch to a buffer visiting file FILENAME,
creating one if none already exists.
Interactively, the default if you just type RET is the current directory,
but the visited file name is available through the minibuffer history:
type M-x next-history-element to pull it into the minibuffer.

The first time M-x next-history-element is used after Emacs prompts for
the file name, the result is affected by ‘file-name-at-point-functions’,
which by default try to guess the file name by looking at point in the
current buffer.  Customize the value of ‘file-name-at-point-functions’
or set it to nil, if you want only the visited file name and the
current directory to be available on first M-x next-history-element
request.

You can visit files on remote machines by specifying something
like /ssh:SOME_REMOTE_MACHINE:FILE for the file name.  You can
also visit local files as a different user by specifying
/sudo::FILE for the file name.
See the Info node ‘(tramp)File name Syntax’ in the Tramp Info
manual, for more about this.

Interactively, or if WILDCARDS is non-nil in a call from Lisp,
expand wildcards (if any) and visit multiple files.  You can
suppress wildcard expansion by setting ‘find-file-wildcards’ to nil.

To visit a file without any kind of conversion and without
automatically choosing a major mode, use M-x find-file-literally.

(fn FILENAME &optional WILDCARDS)
* SPC :
** SPC :
*** Function
 execute-extended-command
*** Documentation
	Read a command name, then read the arguments and call the command.
To pass a prefix argument to the command you are
invoking, give a prefix argument to ‘execute-extended-command’.

(fn PREFIXARG &optional COMMAND-NAME TYPED)
* SPC ;
** SPC ;
*** Function
 eval-expression
*** Documentation
	:after advice: ‘amx-post-eval-force-update’

Evaluate EXP and print value in the echo area.
When called interactively, read an Emacs Lisp expression and
evaluate it.  Value is also consed on to front of the variable
‘values’.  Optional argument INSERT-VALUE non-nil (interactively,
with a non ‘-’ prefix argument) means insert the result into the
current buffer instead of printing it in the echo area.

Normally, this function truncates long output according to the
value of the variables ‘eval-expression-print-length’ and
‘eval-expression-print-level’.  When NO-TRUNCATE is
non-nil (interactively, with a prefix argument of zero), however,
there is no such truncation.

If the resulting value is an integer, and CHAR-PRINT-LIMIT is
non-nil (interactively, unless given a non-zero prefix argument)
it will be printed in several additional formats (octal,
hexadecimal, and character).  The character format is only used
if the value is below CHAR-PRINT-LIMIT (interactively, if the
prefix argument is -1 or the value doesn’t exceed
‘eval-expression-print-maximum-character’).

Runs the hook ‘eval-expression-minibuffer-setup-hook’ on entering the
minibuffer.

If ‘eval-expression-debug-on-error’ is non-nil, which is the default,
this command arranges for all errors to enter the debugger.

(fn EXP &optional INSERT-VALUE NO-TRUNCATE CHAR-PRINT-LIMIT)
* SPC <
** SPC <
*** Function
 switch-to-buffer
*** Documentation
	:around advice: ‘ad-Advice-switch-to-buffer’
:around advice: ‘doom*run-switch-buffer-hooks’

Display buffer BUFFER-OR-NAME in the selected window.

WARNING: This is NOT the way to work on another buffer temporarily
within a Lisp program!  Use ‘set-buffer’ instead.  That avoids
messing with the window-buffer correspondences.

If the selected window cannot display the specified buffer
because it is a minibuffer window or strongly dedicated to
another buffer, call ‘pop-to-buffer’ to select the buffer in
another window.  In interactive use, if the selected window is
strongly dedicated to its buffer, the value of the option
‘switch-to-buffer-in-dedicated-window’ specifies how to proceed.

If called interactively, read the buffer name using ‘read-buffer’.
The variable ‘confirm-nonexistent-file-or-buffer’ determines
whether to request confirmation before creating a new buffer.
See ‘read-buffer’ for features related to input and completion
of buffer names.

BUFFER-OR-NAME may be a buffer, a string (a buffer name), or nil.
If BUFFER-OR-NAME is a string that does not identify an existing
buffer, create a buffer with that name.  If BUFFER-OR-NAME is
nil, switch to the buffer returned by ‘other-buffer’.

If optional argument NORECORD is non-nil, do not put the buffer
at the front of the buffer list, and do not make the window
displaying it the most recently selected one.

If optional argument FORCE-SAME-WINDOW is non-nil, the buffer
must be displayed in the selected window when called
non-interactively; if that is impossible, signal an error rather
than calling ‘pop-to-buffer’.  It has no effect when the option
‘switch-to-buffer-obey-display-actions’ is non-nil.

The option ‘switch-to-buffer-preserve-window-point’ can be used
to make the buffer appear at its last position in the selected
window.

If the option ‘switch-to-buffer-obey-display-actions’ is non-nil,
run the function ‘pop-to-buffer-same-window’ instead.
This may display the buffer in another window as specified by
‘display-buffer-overriding-action’, ‘display-buffer-alist’ and
other display related variables.  If this results in displaying
the buffer in the selected window, window start and point are adjusted
as prescribed by the option ‘switch-to-buffer-preserve-window-point’.
Otherwise, these are left alone.

Return the buffer switched to.

(fn BUFFER-OR-NAME &optional NORECORD FORCE-SAME-WINDOW)
* SPC X
** SPC X
*** Function
 org-capture
*** Documentation
	Capture something.

This will let you select a template from ‘org-capture-templates’, and
then file the newly captured information.  The text is immediately
inserted at the target location, and an indirect buffer is shown where
you can edit it.  Pressing ‘C-c C-c’ brings you back to the previous
state of Emacs, so that you can continue your work.

When called interactively with a ‘M-x universal-argument’ prefix argument GOTO, don’t
capture anything, just go to the file/headline where the selected
template stores its notes.

With a ‘M-x universal-argument M-x universal-argument’ prefix argument, go to the last note stored.

When called with a ‘C-0’ (zero) prefix, insert a template at point.

When called with a ‘C-1’ (one) prefix, force prompting for a date when
a datetree entry is made.

ELisp programs can set KEYS to a string associated with a template
in ‘org-capture-templates’.  In this case, interactive selection
will be bypassed.

If ‘org-capture-use-agenda-date’ is non-nil, capturing from the
agenda will use the date at point as the default date.  Then, a
‘C-1’ prefix will tell the capture process to use the HH:MM time
of the day at point (if any) or the current HH:MM time.

(fn &optional GOTO KEYS)
* SPC u
** SPC u
*** Function
 universal-argument
*** Documentation
	Begin a numeric argument for the following command.
Digits or minus sign following SPC u make up the numeric argument.
SPC u following the digits or minus sign ends the argument.
SPC u without digits or minus sign provides 4 as argument.
Repeating SPC u without digits or minus sign
 multiplies the argument by 4 each time.
For some commands, just SPC u by itself serves as a flag
which is different in effect from any particular numeric argument.
These commands include C-@ and M-x start-kbd-macro.
* SPC x
** SPC x
*** Function
 doom/open-scratch-buffer
*** Documentation
	Opens a scratch pad window in the same major-mode.

If ARG (universal argument), then open a persistent scratch pad buffer. You’ll
be prompted for its name, or to open a previously created. These are stored in
‘doom-scratch-files-dir’.

If a region is active, copy its contents to the scratch pad.

(fn &optional ARG)
* SPC ~
** SPC ~
*** Function
 +popup/toggle
*** Documentation
	If popups are open, close them. If they aren’t, restore the last one or open
the message buffer in a popup window.
* SPC DEL
** SPC DEL
*** Function
 +nav-flash/blink-cursor
*** Documentation
	Blink current line using ‘nav-flash’.
* SPC t F
** SPC t F
*** Function
 toggle-frame-fullscreen
*** Documentation
	Toggle fullscreen state of FRAME.
Make selected frame fullscreen or restore its previous size
if it is already fullscreen.

Before making the frame fullscreen remember the current value of
the frame’s ‘fullscreen’ parameter in the ‘fullscreen-restore’
parameter of the frame.  That value is used to restore the
frame’s fullscreen state when toggling fullscreen the next time.

Note that with some window managers you may have to set
‘frame-resize-pixelwise’ to non-nil in order to make a frame
appear truly fullscreen.  In addition, you may have to set
‘x-frame-normalize-before-maximize’ in order to enable
transitions from one fullscreen state to another.

See also ‘toggle-frame-maximized’.

(fn &optional FRAME)
** SPC t b
*** Function
 doom-big-font-mode
*** Documentation
	A global mode that resizes the font, for streams, screen-sharing and
presentations.

If called interactively, enable Doom-Big-Font mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it
if ARG is ‘toggle’; disable the mode otherwise.

Uses ‘doom-big-font’ when enabled.
** SPC t f
*** Function
 flycheck-mode
*** Documentation
	Minor mode for on-the-fly syntax checking.

When called interactively, toggle ‘flycheck-mode’.  With prefix
ARG, enable ‘flycheck-mode’ if ARG is positive, otherwise disable
it.

When called from Lisp, enable ‘flycheck-mode’ if ARG is omitted,
nil or positive.  If ARG is ‘toggle’, toggle ‘flycheck-mode’.
Otherwise behave as if called interactively.

In ‘flycheck-mode’ the buffer is automatically syntax-checked
using the first suitable syntax checker from ‘flycheck-checkers’.
Use ‘flycheck-select-checker’ to select a checker for the current
buffer manually.

key             binding
---             -------

C-c             Prefix Command

C-c !           Prefix Command

C-c ! C-c       flycheck-compile
C-c ! C-w       flycheck-copy-errors-as-kill
C-c ! ?         flycheck-describe-checker
C-c ! C         flycheck-clear
C-c ! H         display-local-help
C-c ! V         flycheck-version
C-c ! c         flycheck-buffer
C-c ! e         flycheck-explain-error-at-point
C-c ! h         flycheck-display-error-at-point
C-c ! i         flycheck-manual
C-c ! l         flycheck-list-errors
C-c ! n         flycheck-next-error
C-c ! p         flycheck-previous-error
C-c ! s         flycheck-select-checker
C-c ! v         flycheck-verify-setup
C-c ! x         flycheck-disable-checker



(fn &optional ARG)
** SPC t g
*** Function
 evil-goggles-mode
*** Documentation
	evil-goggles global minor mode.

If called interactively, enable Evil-Goggles mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it
if ARG is ‘toggle’; disable the mode otherwise.

(fn &optional ARG)
** SPC t l
*** Function
 doom/toggle-line-numbers
*** Documentation
	Toggle line numbers.

Cycles through regular, relative and no line numbers. The order depends on what
‘display-line-numbers-type’ is set to. If you’re using Emacs 26+, and
visual-line-mode is on, this skips relative and uses visual instead.

See ‘display-line-numbers’ for what these values mean.
** SPC t p
*** Function
 +org-present/start
*** Documentation
	TODO

(fn)
** SPC t s
*** Function
 flyspell-mode
*** Documentation
	Toggle on-the-fly spell checking (Flyspell mode).

If called interactively, enable Flyspell mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it
if ARG is ‘toggle’; disable the mode otherwise.

Flyspell mode is a buffer-local minor mode.  When enabled, it
spawns a single Ispell process and checks each word.  The default
flyspell behavior is to highlight incorrect words.

Bindings:
z =: correct words (using Ispell).
M-x flyspell-auto-correct-word: automatically correct word.
M-x flyspell-auto-correct-previous-word: automatically correct the last misspelled word.
M-x flyspell-correct-word (or down-mouse-2): popup correct words.

Hooks:
This runs ‘flyspell-mode-hook’ after flyspell mode is entered or exit.

Remark:
‘flyspell-mode’ uses ‘ispell-mode’.  Thus all Ispell options are
valid.  For instance, a different dictionary can be used by
invoking ‘ispell-change-dictionary’.

Consider using the ‘ispell-parser’ to check your text.  For instance
consider adding:
(add-hook 'tex-mode-hook (function (lambda () (setq ispell-parser 'tex))))
in your init file.

M-x flyspell-region checks all words inside a region.
M-x flyspell-buffer checks the whole buffer.

(fn &optional ARG)
* SPC s /
** SPC s /
*** Function
 yas-visit-snippet-file
*** Documentation
	Choose a snippet to edit, selection like ‘yas-insert-snippet’.

Only success if selected snippet was loaded from a file.  Put the
visited file in ‘snippet-mode’.
** SPC s S
*** Function
 +snippets/browse
*** Documentation
	TODO

(fn ARG)
** SPC s i
*** Function
 yas-insert-snippet
*** Documentation
	Choose a snippet to expand, pop-up a list of choices according
to ‘yas-prompt-functions’.

With prefix argument NO-CONDITION, bypass filtering of snippets
by condition.
** SPC s n
*** Function
 yas-new-snippet
*** Documentation
	Pops a new buffer for writing a snippet.

Expands a snippet-writing snippet, unless the optional prefix arg
NO-TEMPLATE is non-nil.
** SPC s r
*** Function
 yas-reload-all
*** Documentation
	Reload all snippets and rebuild the YASnippet menu.

When NO-JIT is non-nil force immediate reload of all known
snippets under ‘yas-snippet-dirs’, otherwise use just-in-time
loading.

When called interactively, use just-in-time loading when given a
prefix argument.
** SPC s s
*** Function
 +snippets/find-file
*** Documentation
	TODO

(fn)
* SPC q L
** SPC q L
*** Function
 doom/load-session
*** Documentation
	TODO

(fn FILE)
** SPC q Q
*** Function
 evil-save-and-quit
*** Documentation
	Save all buffers and exit Emacs.
** SPC q R
*** Function
 doom/restart
*** Documentation
	Restart Emacs.

When called interactively ARGS is interpreted as follows

- with a single ‘universal-argument’ (‘C-u’) Emacs is restarted
  with ‘--debug-init’ flag
- with two ‘universal-argument’ (‘C-u’) Emacs is restarted with
  ‘-Q’ flag
- with three ‘universal-argument’ (‘C-u’) the user prompted for
  the arguments

When called non-interactively ARGS should be a list of arguments
with which Emacs should be restarted.

(fn &optional ARGS)
** SPC q S
*** Function
 doom/save-session
*** Documentation
	TODO

(fn FILE)
** SPC q l
*** Function
 doom/quickload-session
*** Documentation
	TODO

(fn)
** SPC q q
*** Function
 evil-quit-all
*** Documentation
	Exits Emacs, asking for saving.
** SPC q r
*** Function
 doom/restart-and-restore
*** Documentation
	TODO

(fn &optional DEBUG)
** SPC q s
*** Function
 doom/quicksave-session
*** Documentation
	TODO

(fn)
* SPC p !
** SPC p !
*** Function
 projectile-run-shell-command-in-root
*** Documentation
	Invoke ‘shell-command’ in the project’s root.
** SPC p .
*** Function
 +default/browse-project
*** Documentation
	nil
** SPC p /
*** Function
 projectile-find-file
*** Documentation
	Jump to a project’s file using completion.
With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)
** SPC p c
*** Function
 projectile-compile-project
*** Documentation
	Run project compilation command.

Normally you’ll be prompted for a compilation command, unless
variable ‘compilation-read-command’.  You can force the prompt
with a prefix ARG.

(fn ARG)
** SPC p o
*** Function
 projectile-find-other-file
*** Documentation
	Switch between files with the same name but different extensions.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable ‘projectile-other-file-alist’.

(fn &optional FLEX-MATCHING)
** SPC p p
*** Function
 projectile-switch-project
*** Documentation
	Switch to a project we have visited before.
Invokes the command referenced by ‘projectile-switch-project-action’ on switch.
With a prefix ARG invokes ‘projectile-commander’ instead of
‘projectile-switch-project-action.’

(fn &optional ARG)
** SPC p r
*** Function
 projectile-recentf
*** Documentation
	Show a list of recently visited files in a project.
** SPC p t
*** Function
 +default/project-tasks
*** Documentation
	Invokes ‘+ivy/tasks’ or ‘+helm/tasks’, depending on which is available.
** SPC p x
*** Function
 projectile-invalidate-cache
*** Documentation
	Remove the current project’s files from ‘projectile-projects-cache’.

With a prefix argument PROMPT prompts for the name of the project whose cache
to invalidate.

(fn PROMPT)
* SPC o -
** SPC o -
*** Function
 dired-jump
*** Documentation
	Jump to Dired buffer corresponding to current buffer.
If in a file, Dired the current directory and move to file’s line.
If in Dired already, pop up a level and goto old directory’s line.
In case the proper Dired file line cannot be found, refresh the dired
buffer and try again.
When OTHER-WINDOW is non-nil, jump to Dired buffer in other window.
When FILE-NAME is non-nil, jump to its line in Dired.
Interactively with prefix argument, read FILE-NAME.

(fn &optional OTHER-WINDOW FILE-NAME)
** SPC o P
*** Function
 +treemacs/find-file
*** Documentation
	Open treemacs (if necessary) and find current file.
** SPC o R
*** Function
 +eval/open-repl-same-window
*** Documentation
	Opens (or reopens) the REPL associated with the current major-mode and place
the cursor at the prompt.

If ARG (universal argument), prompt for a specific REPL to open.

(fn &optional ARG)
** SPC o a
*** Function
 org-agenda
*** Documentation
	Dispatch agenda commands to collect entries to the agenda buffer.
Prompts for a command to execute.  Any prefix arg will be passed
on to the selected command.  The default selections are:

a     Call ‘org-agenda-list’ to display the agenda for current day or week.
t     Call ‘org-todo-list’ to display the global todo list.
T     Call ‘org-todo-list’ to display the global todo list, select only
      entries with a specific TODO keyword (the user gets a prompt).
m     Call ‘org-tags-view’ to display headlines with tags matching
      a condition  (the user is prompted for the condition).
M     Like ‘m’, but select only TODO entries, no ordinary headlines.
e     Export views to associated files.
s     Search entries for keywords.
S     Search entries for keywords, only with TODO keywords.
/     Multi occur across all agenda files and also files listed
      in ‘org-agenda-text-search-extra-files’.
<     Restrict agenda commands to buffer, subtree, or region.
      Press several times to get the desired effect.
>     Remove a previous restriction.
#     List "stuck" projects.
!     Configure what "stuck" means.
C     Configure custom agenda commands.

More commands can be added by configuring the variable
‘org-agenda-custom-commands’.  In particular, specific tags and TODO keyword
searches can be pre-defined in this way.

If the current buffer is in Org mode and visiting a file, you can also
first press ‘<’ once to indicate that the agenda should be temporarily
(until the next use of ‘SPC o a’) restricted to the current file.
Pressing ‘<’ twice means to restrict to the current subtree or region
(if active).
** SPC o b
*** Function
 browse-url-of-file
*** Documentation
	Ask a WWW browser to display FILE.
Display the current buffer’s file if FILE is nil or if called
interactively.  Turn the filename into a URL with function
‘browse-url-file-url’.  Pass the URL to a browser using the
‘browse-url’ function then run ‘browse-url-of-file-hook’.

(fn &optional FILE)
** SPC o i
*** Function
 imenu-list-smart-toggle
*** Documentation
	Enable or disable ‘imenu-list-minor-mode’ according to buffer’s visibility.
If the imenu-list buffer is displayed in any window, disable
‘imenu-list-minor-mode’, otherwise enable it.
Note that all the windows in every frame searched, even invisible ones, not
only those in the selected frame.

(fn)
** SPC o p
*** Function
 +treemacs/toggle
*** Documentation
	Initialize or toggle treemacs.

Ensures that only the current project is present and all other projects have
been removed.

Use ‘treemacs’ command for old functionality.
** SPC o r
*** Function
 +eval/open-repl-other-window
*** Documentation
	Does ‘+eval/open-repl’, but in a popup window.

If ARG (universal argument), prompt for a specific REPL to open.

(fn &optional ARG)
* SPC n N
** SPC n N
*** Function
 +default/browse-notes
*** Documentation
	nil
** SPC n n
*** Function
 +default/find-in-notes
*** Documentation
	nil
** SPC n x
*** Function
 org-capture
*** Documentation
	Capture something.

This will let you select a template from ‘org-capture-templates’, and
then file the newly captured information.  The text is immediately
inserted at the target location, and an indirect buffer is shown where
you can edit it.  Pressing ‘C-c C-c’ brings you back to the previous
state of Emacs, so that you can continue your work.

When called interactively with a ‘M-x universal-argument’ prefix argument GOTO, don’t
capture anything, just go to the file/headline where the selected
template stores its notes.

With a ‘M-x universal-argument M-x universal-argument’ prefix argument, go to the last note stored.

When called with a ‘C-0’ (zero) prefix, insert a template at point.

When called with a ‘C-1’ (one) prefix, force prompting for a date when
a datetree entry is made.

ELisp programs can set KEYS to a string associated with a template
in ‘org-capture-templates’.  In this case, interactive selection
will be bypassed.

If ‘org-capture-use-agenda-date’ is non-nil, capturing from the
agenda will use the date at point as the default date.  Then, a
‘C-1’ prefix will tell the capture process to use the HH:MM time
of the day at point (if any) or the current HH:MM time.

(fn &optional GOTO KEYS)
* SPC i s
** SPC i s
*** Function
 yas-insert-snippet
*** Documentation
	Choose a snippet to expand, pop-up a list of choices according
to ‘yas-prompt-functions’.

With prefix argument NO-CONDITION, bypass filtering of snippets
by condition.
** SPC i y
*** Function
 +default/yank-pop
*** Documentation
	Interactively select what text to insert from the kill ring.
* SPC g '
** SPC g '
*** Function
 forge-dispatch
*** Documentation
	nil
** SPC g /
*** Function
 magit-dispatch
*** Documentation
	Invoke a Magit command from a list of available commands.
** SPC g B
*** Function
 magit-blame-addition
*** Documentation
	For each line show the revision in which it was added.
** SPC g C
*** Function
 +magit/clone
*** Documentation
	Like ‘magit-clone’, but supports additional formats on top of absolute URLs:

+ USER/REPO: assumes {‘+magit-default-clone-url’}/USER/REPO
+ REPO: assumes {‘+magit-default-clone-url’}/{USER}/REPO, where {USER} is
  ascertained from your global gitconfig.

(fn URL-OR-REPO DIR)
** SPC g F
*** Function
 magit-fetch
*** Documentation
	Fetch from another repository.
** SPC g L
*** Function
 magit-log
*** Documentation
	Show a commit or reference log.
** SPC g R
*** Function
 vc-revert
*** Documentation
	Revert working copies of the selected fileset to their repository contents.
This asks for confirmation if the buffer contents are not identical
to the working revision (except for keyword expansion).

(fn)
** SPC g S
*** Function
 magit-stage-file
*** Documentation
	:after advice: ‘+version-control|update-git-gutter’

Stage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be staged.  Otherwise stage the file at point without
requiring confirmation.

(fn FILE)
** SPC g U
*** Function
 magit-unstage-file
*** Documentation
	:after advice: ‘+version-control|update-git-gutter’

Unstage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be unstaged.  Otherwise unstage the file at point
without requiring confirmation.

(fn FILE)
** SPC g [
*** Function
 git-gutter:previous-hunk
*** Documentation
	Move to previous diff hunk

(fn ARG)
** SPC g ]
*** Function
 git-gutter:next-hunk
*** Documentation
	Move to next diff hunk

(fn ARG)
** SPC g g
*** Function
 magit-status
*** Documentation
	:before advice: ‘doom|transient-hook--load-forge’

Show the status of the current Git repository in a buffer.

If the current directory isn’t located within a Git repository,
then prompt for an existing repository or an arbitrary directory,
depending on option ‘magit-repository-directories’, and show the
status of the selected repository instead.

* If that option specifies any existing repositories, then offer
  those for completion and show the status buffer for the
  selected one.

* Otherwise read an arbitrary directory using regular file-name
  completion.  If the selected directory is the top-level of an
  existing working tree, then show the status buffer for that.

* Otherwise offer to initialize the selected directory as a new
  repository.  After creating the repository show its status
  buffer.

These fallback behaviors can also be forced using one or more
prefix arguments:

* With two prefix arguments (or more precisely a numeric prefix
  value of 16 or greater) read an arbitrary directory and act on
  it as described above.  The same could be accomplished using
  the command ‘magit-init’.

* With a single prefix argument read an existing repository, or
  if none can be found based on ‘magit-repository-directories’,
  then fall back to the same behavior as with two prefix
  arguments.

(fn &optional DIRECTORY CACHE)
** SPC g r
*** Function
 git-gutter:revert-hunk
*** Documentation
	Revert current hunk.
** SPC g s
*** Function
 git-gutter:stage-hunk
*** Documentation
	Stage this hunk like ’git add -p’.
** SPC g t
*** Function
 git-timemachine-toggle
*** Documentation
	Toggle git timemachine mode.

(fn)
** SPC g x
*** Function
 magit-file-delete
*** Documentation
	Delete the selected FILES or one file read in the minibuffer.

With a prefix argument FORCE do so even when the files have
uncommitted changes.  When the files aren’t being tracked in
Git, then fallback to using ‘delete-file’.

(fn FILES &optional FORCE)
* SPC f .
** SPC f .
*** Function
 counsel-file-jump
*** Documentation
	Jump to a file below the current directory.
List all files within the current directory or any of its subdirectories.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)
** SPC f /
*** Function
 projectile-find-file
*** Documentation
	Jump to a project’s file using completion.
With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)
** SPC f >
*** Function
 doom/browse-in-other-project
*** Documentation
	Preforms ‘find-file’ in a known project of your choosing.
** SPC f ?
*** Function
 doom/find-file-in-other-project
*** Documentation
	Preforms ‘projectile-find-file’ in a known project of your choosing.
** SPC f E
*** Function
 +default/browse-emacsd
*** Documentation
	nil
** SPC f P
*** Function
 doom/open-private-config
*** Documentation
	TODO

(fn)
** SPC f R
*** Function
 projectile-recentf
*** Documentation
	Show a list of recently visited files in a project.
** SPC f S
*** Function
 doom/sudo-find-file
*** Documentation
	Open FILE as root.

(fn FILE)
** SPC f X
*** Function
 doom/delete-this-file
*** Documentation
	Delete FILENAME (defaults to the file associated with current buffer) and
kills the buffer. If FORCE-P, force the deletion (don’t ask for confirmation).

(fn &optional PATH FORCE-P)
** SPC f a
*** Function
 projectile-find-other-file
*** Documentation
	Switch between files with the same name but different extensions.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable ‘projectile-other-file-alist’.

(fn &optional FLEX-MATCHING)
** SPC f d
*** Function
 dired
*** Documentation
	"Edit" directory DIRNAME--delete, rename, print, etc. some files in it.
Optional second argument SWITCHES specifies the ‘ls’ options used.
(Interactively, use a prefix argument to be able to specify SWITCHES.)

If DIRNAME is a string, Dired displays a list of files in DIRNAME (which
may also have shell wildcards appended to select certain files).

If DIRNAME is a cons, its first element is taken as the directory name
and the rest as an explicit list of files to make directory entries for.
In this case, SWITCHES are applied to each of the files separately, and
therefore switches that control the order of the files in the produced
listing have no effect.

You can flag files for deletion with d and then
delete them by typing x.
Type h after entering Dired for more info.

If DIRNAME is already in a Dired buffer, that buffer is used without refresh.

(fn DIRNAME &optional SWITCHES)
** SPC f e
*** Function
 +default/find-in-emacsd
*** Documentation
	nil
** SPC f p
*** Function
 doom/find-file-in-private-config
*** Documentation
	TODO

(fn)
** SPC f r
*** Function
 recentf-open-files
*** Documentation
	Show a dialog to open a recent file.
If optional argument FILES is non-nil, it is a list of recently-opened
files to choose from.  It defaults to the whole recent list.
If optional argument BUFFER-NAME is non-nil, it is a buffer name to
use for the dialog.  It defaults to "*‘recentf-menu-title’*".
** SPC f s
*** Function
 save-buffer
*** Documentation
	Save current buffer in visited file if modified.
Variations are described below.

By default, makes the previous version into a backup file
 if previously requested or if this is the first save.
Prefixed with one SPC u, marks this version
 to become a backup when the next save is done.
Prefixed with two SPC u’s,
 makes the previous version into a backup file.
Prefixed with three SPC u’s, marks this version
 to become a backup when the next save is done,
 and makes the previous version into a backup file.

With a numeric prefix argument of 0, never make the previous version
into a backup file.

Note that the various variables that control backups, such
as ‘version-control’, ‘backup-enable-predicate’, ‘vc-make-backup-files’,
and ‘backup-inhibited’, to name just the more popular ones, still
control whether a backup will actually be produced, even when you
invoke this command prefixed with two or three SPC u’s.

If a file’s name is FOO, the names of its numbered backup versions are
 FOO.~i~ for various integers i.  A non-numbered backup file is called FOO~.
Numeric backups (rather than FOO~) will be made if value of
 ‘version-control’ is not the atom ‘never’ and either there are already
 numeric versions of the file being backed up, or ‘version-control’ is
 non-nil.
We don’t want excessive versions piling up, so there are variables
 ‘kept-old-versions’, which tells Emacs how many oldest versions to keep,
 and ‘kept-new-versions’, which tells how many newest versions to keep.
 Defaults are 2 old versions and 2 new.
‘dired-kept-versions’ controls dired’s clean-directory (.) command.
If ‘delete-old-versions’ is nil, system will query user
 before trimming versions.  Otherwise it does it silently.

If ‘vc-make-backup-files’ is nil, which is the default,
 no backup files are made for files managed by version control.
 (This is because the version control system itself records previous versions.)

See the subroutine ‘basic-save-buffer’ for more information.

(fn &optional ARG)
** SPC f y
*** Function
 +default/yank-buffer-filename
*** Documentation
	Copy the current buffer’s path to the kill ring.
* SPC c D
** SPC c D
*** Function
 +lookup/references
*** Documentation
	Show a list of usages of IDENTIFIER (defaults to the symbol at point)

Tries each function in ‘+lookup-references-functions’ until one changes the
point and/or current buffer. Falls back to a naive ripgrep/the_silver_searcher
search otherwise.
** SPC c E
*** Function
 +eval:replace-region
*** Documentation
	nil
** SPC c W
*** Function
 doom/delete-trailing-newlines
*** Documentation
	Trim trailing newlines.

Respects ‘require-final-newline’.
** SPC c d
*** Function
 +lookup/definition
*** Documentation
	Jump to the definition of IDENTIFIER (defaults to the symbol at point).

If OTHER-WINDOW (universal argument), open the result in another window.

Each function in ‘+lookup-definition-functions’ is tried until one changes the
point or current buffer. Falls back to dumb-jump, naive
ripgrep/the_silver_searcher text search, then ‘evil-goto-definition’ if
evil-mode is active.
** SPC c e
*** Function
 +eval/buffer-or-region
*** Documentation
	Evaluate the whole buffer.

(fn)
** SPC c r
*** Function
 +eval/open-repl-other-window
*** Documentation
	Does ‘+eval/open-repl’, but in a popup window.

If ARG (universal argument), prompt for a specific REPL to open.

(fn &optional ARG)
** SPC c w
*** Function
 delete-trailing-whitespace
*** Documentation
	Delete trailing whitespace between START and END.
If called interactively, START and END are the start/end of the
region if the mark is active, or of the buffer’s accessible
portion if the mark is inactive.

This command deletes whitespace characters after the last
non-whitespace character in each line between START and END.  It
does not consider formfeed characters to be whitespace.

If this command acts on the entire buffer (i.e. if called
interactively with the mark inactive, or called from Lisp with
END nil), it also deletes all trailing lines at the end of the
buffer if the variable ‘delete-trailing-lines’ is non-nil.

(fn &optional START END)
** SPC c x
*** Function
 flycheck-list-errors
*** Documentation
	Show the error list for the current buffer.
* SPC b -
** SPC b -
*** Function
 doom/clone-and-narrow-buffer
*** Documentation
	Restrict editing in this buffer to the current region, indirectly. With CLONE-P,
clone the buffer and hard-narrow the selection. If mark isn’t active, then widen
the buffer (if narrowed).

Inspired from http://demonastery.org/2013/04/emacs-evil-narrow-region/
** SPC b B
*** Function
 switch-to-buffer
*** Documentation
	:around advice: ‘ad-Advice-switch-to-buffer’
:around advice: ‘doom*run-switch-buffer-hooks’

Display buffer BUFFER-OR-NAME in the selected window.

WARNING: This is NOT the way to work on another buffer temporarily
within a Lisp program!  Use ‘set-buffer’ instead.  That avoids
messing with the window-buffer correspondences.

If the selected window cannot display the specified buffer
because it is a minibuffer window or strongly dedicated to
another buffer, call ‘pop-to-buffer’ to select the buffer in
another window.  In interactive use, if the selected window is
strongly dedicated to its buffer, the value of the option
‘switch-to-buffer-in-dedicated-window’ specifies how to proceed.

If called interactively, read the buffer name using ‘read-buffer’.
The variable ‘confirm-nonexistent-file-or-buffer’ determines
whether to request confirmation before creating a new buffer.
See ‘read-buffer’ for features related to input and completion
of buffer names.

BUFFER-OR-NAME may be a buffer, a string (a buffer name), or nil.
If BUFFER-OR-NAME is a string that does not identify an existing
buffer, create a buffer with that name.  If BUFFER-OR-NAME is
nil, switch to the buffer returned by ‘other-buffer’.

If optional argument NORECORD is non-nil, do not put the buffer
at the front of the buffer list, and do not make the window
displaying it the most recently selected one.

If optional argument FORCE-SAME-WINDOW is non-nil, the buffer
must be displayed in the selected window when called
non-interactively; if that is impossible, signal an error rather
than calling ‘pop-to-buffer’.  It has no effect when the option
‘switch-to-buffer-obey-display-actions’ is non-nil.

The option ‘switch-to-buffer-preserve-window-point’ can be used
to make the buffer appear at its last position in the selected
window.

If the option ‘switch-to-buffer-obey-display-actions’ is non-nil,
run the function ‘pop-to-buffer-same-window’ instead.
This may display the buffer in another window as specified by
‘display-buffer-overriding-action’, ‘display-buffer-alist’ and
other display related variables.  If this results in displaying
the buffer in the selected window, window start and point are adjusted
as prescribed by the option ‘switch-to-buffer-preserve-window-point’.
Otherwise, these are left alone.

Return the buffer switched to.

(fn BUFFER-OR-NAME &optional NORECORD FORCE-SAME-WINDOW)
** SPC b N
*** Function
 evil-buffer-new
*** Documentation
	Creates a new buffer replacing the current window, optionally
   editing a certain FILE
** SPC b S
*** Function
 doom/sudo-this-file
*** Documentation
	Open the current file as root.

(fn)
** SPC b [
*** Function
 previous-buffer
*** Documentation
	In selected window switch to previous buffer.
** SPC b ]
*** Function
 next-buffer
*** Documentation
	In selected window switch to next buffer.
** SPC b b
*** Function
 persp-switch-to-buffer
*** Documentation
	Switch to buffer, read buffer with restriction to current perspective.
** SPC b k
*** Function
 kill-this-buffer
*** Documentation
	:around advice: ‘doom*switch-to-fallback-buffer-maybe’

Kill the current buffer.
When called in the minibuffer, get out of the minibuffer
using ‘abort-recursive-edit’.

This command can be reliably invoked only from the menu bar,
otherwise it could decide to silently do nothing.

(fn)
** SPC b n
*** Function
 next-buffer
*** Documentation
	In selected window switch to next buffer.
** SPC b o
*** Function
 doom/kill-other-buffers
*** Documentation
	Kill all other buffers (besides the current one).

If PROJECT-P (universal argument), kill only buffers that belong to the current
project.
** SPC b p
*** Function
 previous-buffer
*** Documentation
	In selected window switch to previous buffer.
** SPC b s
*** Function
 save-buffer
*** Documentation
	Save current buffer in visited file if modified.
Variations are described below.

By default, makes the previous version into a backup file
 if previously requested or if this is the first save.
Prefixed with one SPC u, marks this version
 to become a backup when the next save is done.
Prefixed with two SPC u’s,
 makes the previous version into a backup file.
Prefixed with three SPC u’s, marks this version
 to become a backup when the next save is done,
 and makes the previous version into a backup file.

With a numeric prefix argument of 0, never make the previous version
into a backup file.

Note that the various variables that control backups, such
as ‘version-control’, ‘backup-enable-predicate’, ‘vc-make-backup-files’,
and ‘backup-inhibited’, to name just the more popular ones, still
control whether a backup will actually be produced, even when you
invoke this command prefixed with two or three SPC u’s.

If a file’s name is FOO, the names of its numbered backup versions are
 FOO.~i~ for various integers i.  A non-numbered backup file is called FOO~.
Numeric backups (rather than FOO~) will be made if value of
 ‘version-control’ is not the atom ‘never’ and either there are already
 numeric versions of the file being backed up, or ‘version-control’ is
 non-nil.
We don’t want excessive versions piling up, so there are variables
 ‘kept-old-versions’, which tells Emacs how many oldest versions to keep,
 and ‘kept-new-versions’, which tells how many newest versions to keep.
 Defaults are 2 old versions and 2 new.
‘dired-kept-versions’ controls dired’s clean-directory (.) command.
If ‘delete-old-versions’ is nil, system will query user
 before trimming versions.  Otherwise it does it silently.

If ‘vc-make-backup-files’ is nil, which is the default,
 no backup files are made for files managed by version control.
 (This is because the version control system itself records previous versions.)

See the subroutine ‘basic-save-buffer’ for more information.

(fn &optional ARG)
** SPC b x
*** Function
 doom/open-scratch-buffer
*** Documentation
	Opens a scratch pad window in the same major-mode.

If ARG (universal argument), then open a persistent scratch pad buffer. You’ll
be prompted for its name, or to open a previously created. These are stored in
‘doom-scratch-files-dir’.

If a region is active, copy its contents to the scratch pad.

(fn &optional ARG)
** SPC b z
*** Function
 bury-buffer
*** Documentation
	Put BUFFER-OR-NAME at the end of the list of all buffers.
There it is the least likely candidate for ‘other-buffer’ to
return; thus, the least likely buffer for SPC < to
select by default.

You can specify a buffer name as BUFFER-OR-NAME, or an actual
buffer object.  If BUFFER-OR-NAME is nil or omitted, bury the
current buffer.  Also, if BUFFER-OR-NAME is nil or omitted,
remove the current buffer from the selected window if it is
displayed there.

(fn &optional BUFFER-OR-NAME)
* SPC TAB TAB
** SPC TAB TAB
*** Function
 +workspace/display
*** Documentation
	Display a list of workspaces (like tabs) in the echo area.
** SPC TAB .
*** Function
 +workspace/switch-to
*** Documentation
	Switch to a workspace at a given INDEX. A negative number will start from the
end of the workspace list.
** SPC TAB 0
*** Function
 +workspace/switch-to-last
*** Documentation
	Switch to the last workspace.
** SPC TAB R
*** Function
 +workspace/restore-last-session
*** Documentation
	TODO

(fn)
** SPC TAB [
*** Function
 +workspace/switch-left
*** Documentation
	nil
** SPC TAB ]
*** Function
 +workspace/switch-right
*** Documentation
	nil
** SPC TAB d
*** Function
 +workspace/delete
*** Documentation
	Delete this workspace. If called with C-u, prompts you for the name of the
workspace to delete.
** SPC TAB l
*** Function
 +workspace/load
*** Documentation
	Load a workspace and switch to it. If called with C-u, try to reload the
current workspace (by name) from session files.
** SPC TAB n
*** Function
 +workspace/new
*** Documentation
	Create a new workspace named NAME. If CLONE-P is non-nil, clone the current
workspace, otherwise the new workspace is blank.
** SPC TAB r
*** Function
 +workspace/rename
*** Documentation
	Rename the current workspace.
** SPC TAB s
*** Function
 +workspace/save
*** Documentation
	Save the current workspace. If called with C-u, autosave the current
workspace.
** SPC TAB x
*** Function
 +workspace/kill-session
*** Documentation
	Delete the current session, all workspaces, windows and their buffers.
* SPC / I
** SPC / I
*** Function
 imenu-anywhere
*** Documentation
	Go to imenu tag defined in all reachable buffers.
Reachable buffers are determined by applying functions in
‘imenu-anywhere-buffer-filter-functions’ to all buffers returned
by ‘imenu-anywhere-buffer-list-function’.

Sorting is done within each buffer and takes into account items’
length. Thus more recent buffers in ‘buffer-list’ and shorter
entries have higher priority.

(fn)
** SPC / b
*** Function
 swiper
*** Documentation
	‘isearch’ with an overview.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)
** SPC / d
*** Function
 +default/search-from-cwd
*** Documentation
	Conduct a text search in files under the current folder.
If prefix ARG is set, prompt for a directory to search from.
** SPC / i
*** Function
 imenu
*** Documentation
	Jump to a place in the buffer chosen using a buffer menu or mouse menu.
INDEX-ITEM specifies the position.  See ‘imenu-choose-buffer-index’
for more information.

(fn INDEX-ITEM)
** SPC / l
*** Function
 ace-link
*** Documentation
	Call the ace link function for the current ‘major-mode’

(fn)
** SPC / o
*** Function
 +lookup/online-select
*** Documentation
	Runs ‘+lookup/online’, but always prompts for the provider to use.
** SPC / p
*** Function
 +default/search-project
*** Documentation
	Conduct a text search in files under the project root.
If prefix ARG is set, prompt for a project to search from.
* SPC h C-a
** SPC h C-a
*** Function
 about-emacs
*** Documentation
	Display the *About GNU Emacs* buffer.
A fancy display is used on graphic displays, normal otherwise.
** SPC h C-c
*** Function
 describe-coding-system
*** Documentation
	Display information about CODING-SYSTEM.

(fn CODING-SYSTEM)
** SPC h C-d
*** Function
 view-emacs-debugging
*** Documentation
	Display info on how to debug Emacs problems.
** SPC h C-e
*** Function
 view-external-packages
*** Documentation
	Display info on where to get more Emacs packages.
** SPC h C-f
*** Function
 view-emacs-FAQ
*** Documentation
	Display the Emacs Frequently Asked Questions (FAQ) file.
** SPC h C-h
*** Function
 help-for-help
*** Documentation
	Help command.
** SPC h C-k
*** Function
 describe-key-briefly
*** Documentation
	Print the name of the functions KEY-LIST invokes.
KEY-LIST is a list of pairs (SEQ . RAW-SEQ) of key sequences, where
RAW-SEQ is the untranslated form of the key sequence SEQ.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer.

While reading KEY-LIST interactively, this command temporarily enables
menu items or tool-bar buttons that are disabled to allow getting help
on them.

(fn &optional KEY-LIST INSERT UNTRANSLATED)
** SPC h C-l
*** Function
 describe-language-environment
*** Documentation
	Describe how Emacs supports language environment LANGUAGE-NAME.

(fn LANGUAGE-NAME)
** SPC h RET
*** Function
 info-emacs-manual
*** Documentation
	Display the Emacs manual in Info mode.
** SPC h C-n
*** Function
 view-emacs-news
*** Documentation
	Display info on recent changes to Emacs.
With argument, display info only for the selected version.

(fn &optional VERSION)
** SPC h C-o
*** Function
 describe-distribution
*** Documentation
	Display info on how to obtain the latest version of GNU Emacs.
** SPC h C-p
*** Function
 view-emacs-problems
*** Documentation
	Display info on known problems with Emacs and possible workarounds.
** SPC h C-s
*** Function
 search-forward-help-for-help
*** Documentation
	Search forward "help window".
** SPC h C-t
*** Function
 view-emacs-todo
*** Documentation
	Display the Emacs TODO list.

(fn &optional ARG)
** SPC h C-v
*** Function
 doom/version
*** Documentation
	Display the current version of Doom & Emacs, including the current Doom
branch and commit.

(fn)
** SPC h C-w
*** Function
 describe-no-warranty
*** Documentation
	Display info on all the kinds of warranty Emacs does NOT have.
** SPC h C-\
*** Function
 describe-input-method
*** Documentation
	Describe input method INPUT-METHOD.

(fn INPUT-METHOD)
** SPC h '
*** Function
 describe-char
*** Documentation
	Describe position POS (interactively, point) and the char after POS.
POS is taken to be in BUFFER, or the current buffer if BUFFER is nil.
The information is displayed in buffer ‘*Help*’.

The position information includes POS; the total size of BUFFER; the
region limits, if narrowed; the column number; and the horizontal
scroll amount, if the buffer is horizontally scrolled.

The character information includes:
 its codepoint;
 its charset (see ‘char-charset’), overridden by the ‘charset’ text
   property at POS, if any;
 the codepoint of the character in the above charset;
 the character’s script (as defined by ‘char-script-table’)
 the character’s syntax, as produced by ‘syntax-after’
   and ‘internal-describe-syntax-value’;
 its category (see ‘char-category-set’ and ‘describe-char-categories’);
 how to input the character using the keyboard and input methods;
 how the character is encoded in BUFFER and in BUFFER’s file;
 the font and font glyphs used to display the character;
 the composition information for displaying the character (if relevant);
 the character’s canonical name and other properties defined by the
   Unicode Data Base;
 and widgets, buttons, overlays, and text properties relevant to POS.

(fn POS &optional BUFFER)
** SPC h .
*** Function
 display-local-help
*** Documentation
	Display local help in the echo area.
This displays a short help message, namely the string produced by
the ‘kbd-help’ property at point.  If ‘kbd-help’ does not produce
a string, but the ‘help-echo’ property does, then that string is
printed instead.

A numeric argument ARG prevents display of a message in case
there is no help.  While ARG can be used interactively, it is
mainly meant for use from Lisp.

(fn &optional ARG)
** SPC h ?
*** Function
 help-for-help
*** Documentation
	Help command.
** SPC h A
*** Function
 doom/describe-autodefs
*** Documentation
	Open the documentation of Doom autodefs.

What is an autodef? It’s a function or macro that is always defined, even if its
containing module is disabled (in which case it will safely no-op). This
syntactic sugar lets you use them without needing to check if they are
available.

(fn AUTODEF)
** SPC h B
*** Function
 doom/open-bug-report
*** Documentation
	Open a markdown buffer destinated to populate the New Issue page on Doom
Emacs’ issue tracker.

If called when a backtrace buffer is present, it and the output of ‘doom-info’
will be automatically appended to the result.

(fn)
** SPC h C
*** Function
 describe-coding-system
*** Documentation
	Display information about CODING-SYSTEM.

(fn CODING-SYSTEM)
** SPC h D
*** Function
 doom/open-manual
*** Documentation
	TODO

(fn)
** SPC h E
*** Function
 doom/open-vanilla-sandbox
*** Documentation
	Open the Emacs Lisp sandbox.

This is a test bed for running Emacs Lisp in an instance of Emacs with varying
amounts of Doom loaded, including:

  a) vanilla Emacs (nothing loaded),
  b) vanilla Doom (only Doom core) and
  c) Doom + modules - your private config.

This is done without sacrificing access to installed packages. Use the sandbox
to reproduce bugs and determine if Doom is to blame.

(fn)
** SPC h F
*** Function
 describe-face
*** Documentation
	Display the properties of face FACE on FRAME.
Interactively, FACE defaults to the faces of the character after point
and FRAME defaults to the selected frame.

If the optional argument FRAME is given, report on face FACE in that frame.
If FRAME is t, report on the defaults for face FACE (for new frames).
If FRAME is omitted or nil, use the selected frame.

(fn FACE &optional FRAME)
** SPC h I
*** Function
 describe-input-method
*** Documentation
	Describe input method INPUT-METHOD.

(fn INPUT-METHOD)
** SPC h K
*** Function
 Info-goto-emacs-key-command-node
*** Documentation
	Go to the node in the Emacs manual which describes the command bound to KEY.
KEY is a string.
Interactively, if the binding is ‘execute-extended-command’, a command is read.
The command is found by looking up in Emacs manual’s indices
or in another manual found via COMMAND’s ‘info-file’ property or
the variable ‘Info-file-list-for-emacs’.

(fn KEY)
** SPC h L
*** Function
 global-command-log-mode
*** Documentation
	nil
** SPC h M
*** Function
 doom/describe-active-minor-mode
*** Documentation
	Get information on an active minor mode. Use ‘describe-minor-mode’ for a
selection of all minor-modes, active or not.

(fn MODE)
** SPC h O
*** Function
 +lookup/online
*** Documentation
	Looks up SEARCH (a string) in you browser using PROVIDER.

PROVIDER should be a key of ‘+lookup-provider-url-alist’.

When used interactively, it will prompt for a query and, for the first time, the
provider from ‘+lookup-provider-url-alist’. On consecutive uses, the last
provider will be reused. If the universal argument is supplied, always prompt
for the provider.
** SPC h P
*** Function
 find-library
*** Documentation
	Find the Emacs Lisp source of LIBRARY.

Interactively, prompt for LIBRARY using the one at or near point.

(fn LIBRARY)
** SPC h S
*** Function
 info-lookup-symbol
*** Documentation
	Display the definition of SYMBOL, as found in the relevant manual.
When this command is called interactively, it reads SYMBOL from the
minibuffer.  In the minibuffer, use M-n to yank the default argument
value into the minibuffer so you can edit it.  The default symbol is the
one found at point.

With prefix arg MODE a query for the symbol help mode is offered.

(fn SYMBOL &optional MODE)
** SPC h T
*** Function
 doom/toggle-profiler
*** Documentation
	Toggle the Emacs profiler. Run it again to see the profiling report.

(fn)
** SPC h V
*** Function
 set-variable
*** Documentation
	Set VARIABLE to VALUE.  VALUE is a Lisp object.
VARIABLE should be a user option variable name, a Lisp variable
meant to be customized by users.  You should enter VALUE in Lisp syntax,
so if you want VALUE to be a string, you must surround it with doublequotes.
VALUE is used literally, not evaluated.

If VARIABLE has a ‘variable-interactive’ property, that is used as if
it were the arg to ‘interactive’ (which see) to interactively read VALUE.

If VARIABLE has been defined with ‘defcustom’, then the type information
in the definition is used to check that VALUE is valid.

Note that this function is at heart equivalent to the basic ‘set’ function.
For a variable defined with ‘defcustom’, it does not pay attention to
any :set property that the variable might have (if you want that, use
M-x customize-set-variable instead).

With a prefix argument, set VARIABLE to VALUE buffer-locally.

(fn VARIABLE VALUE &optional MAKE-LOCAL)
** SPC h W
*** Function
 +default/man-or-woman
*** Documentation
	Invoke ‘man’ if man is installed, otherwise use ‘woman’.
** SPC h a
*** Function
 apropos
*** Documentation
	Show all meaningful Lisp symbols whose names match PATTERN.
Symbols are shown if they are defined as functions, variables, or
faces, or if they have nonempty property lists.

PATTERN can be a word, a list of words (separated by spaces),
or a regexp (using some regexp special characters).  If it is a word,
search for matches for that word as a substring.  If it is a list of words,
search for matches for any two (or more) of those words.

With SPC u prefix, or if ‘apropos-do-all’ is non-nil,
consider all symbols (if they match PATTERN).

Returns list of symbols and documentation found.

(fn PATTERN &optional DO-ALL)
** SPC h b
*** Function
 describe-bindings
*** Documentation
	Display a buffer showing a list of all defined keys, and their definitions.
The keys are displayed in order of precedence.

The optional argument PREFIX, if non-nil, should be a key sequence;
then we display only bindings that start with that prefix.
The optional argument BUFFER specifies which buffer’s bindings
to display (default, the current buffer).  BUFFER can be a buffer
or a buffer name.

(fn &optional PREFIX BUFFER)
** SPC h c
*** Function
 describe-key-briefly
*** Documentation
	Print the name of the functions KEY-LIST invokes.
KEY-LIST is a list of pairs (SEQ . RAW-SEQ) of key sequences, where
RAW-SEQ is the untranslated form of the key sequence SEQ.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer.

While reading KEY-LIST interactively, this command temporarily enables
menu items or tool-bar buttons that are disabled to allow getting help
on them.

(fn &optional KEY-LIST INSERT UNTRANSLATED)
** SPC h d
*** Function
 doom/describe-module
*** Documentation
	Open the documentation of CATEGORY MODULE.

CATEGORY is a keyword and MODULE is a symbol. e.g. :feature and ’evil.

Automatically selects a) the module at point (in private init files), b) the
module derived from a ‘featurep!’ or ‘require!’ call, c) the module that the
current file is in, or d) the module associated with the current major mode (see
‘doom--module-mode-alist’).

(fn CATEGORY MODULE)
** SPC h e
*** Function
 view-echo-area-messages
*** Documentation
	View the log of recent echo-area messages: the ‘*Messages*’ buffer.
The number of messages retained in that buffer
is specified by the variable ‘message-log-max’.
** SPC h f
*** Function
 describe-function
*** Documentation
	Display the full documentation of FUNCTION (a symbol).
When called from lisp, FUNCTION may also be a function object.

(fn FUNCTION)
** SPC h g
*** Function
 describe-gnu-project
*** Documentation
	Browse online information on the GNU project.
** SPC h h
*** Function
 doom/describe-symbol
*** Documentation
	Show help for SYMBOL, a variable, function or macro.

(fn SYMBOL)
** SPC h i
*** Function
 info
*** Documentation
	Enter Info, the documentation browser.
Optional argument FILE-OR-NODE specifies the file to examine;
the default is the top-level directory of Info.
Called from a program, FILE-OR-NODE may specify an Info node of the form
"(FILENAME)NODENAME".
Optional argument BUFFER specifies the Info buffer name;
the default buffer name is *info*.  If BUFFER exists,
just switch to BUFFER.  Otherwise, create a new buffer
with the top-level Info directory.

In interactive use, a non-numeric prefix argument directs
this command to read a file name from the minibuffer.

A numeric prefix argument of N selects an Info buffer named "*info*<N>".

The search path for Info files is in the variable ‘Info-directory-list’.
The top-level Info directory is made by combining all the files named ‘dir’
in all the directories in that path.

See a list of available Info commands in ‘Info-mode’.

(fn &optional FILE-OR-NODE BUFFER)
** SPC h k
*** Function
 describe-key
*** Documentation
	Display documentation of the function invoked by KEY-LIST.
KEY-LIST can be any kind of a key sequence; it can include keyboard events,
mouse events, and/or menu events.  When calling from a program,
pass KEY-LIST as a list of elements (SEQ . RAW-SEQ) where SEQ is
a key-sequence and RAW-SEQ is its untranslated form.

While reading KEY-LIST interactively, this command temporarily enables
menu items or tool-bar buttons that are disabled to allow getting help
on them.

BUFFER is the buffer in which to lookup those keys; it defaults to the
current buffer.

(fn &optional KEY-LIST BUFFER UP-EVENT)
** SPC h l
*** Function
 view-lossage
*** Documentation
	Display last few input keystrokes and the commands run.
For convenience this uses the same format as
‘edit-last-kbd-macro’.

To record all your input, use ‘open-dribble-file’.
** SPC h m
*** Function
 describe-mode
*** Documentation
	Display documentation of current major mode and minor modes.
A brief summary of the minor modes comes first, followed by the
major mode description.  This is followed by detailed
descriptions of the minor modes, each on a separate page.

For this to work correctly for a minor mode, the mode’s indicator
variable (listed in ‘minor-mode-alist’) must also be a function
whose documentation describes the minor mode.

If called from Lisp with a non-nil BUFFER argument, display
documentation for the major and minor modes of that buffer.

(fn &optional BUFFER)
** SPC h n
*** Function
 doom/open-news
*** Documentation
	TODO

(fn)
** SPC h o
*** Function
 describe-symbol
*** Documentation
	Display the full documentation of SYMBOL.
Will show the info of SYMBOL as a function, variable, and/or face.
Optional arguments BUFFER and FRAME specify for which buffer and
frame to show the information about SYMBOL; they default to the
current buffer and the selected frame, respectively.

(fn SYMBOL &optional BUFFER FRAME)
** SPC h p
*** Function
 doom/describe-package
*** Documentation
	Like ‘describe-packages’, but is Doom aware.

Only shows installed packages. Includes information about where packages are
defined and configured.

If prefix arg is prsent, refresh the cache.

(fn PACKAG
